<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>cn.raptor</groupId>
	<artifactId>raptor</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>raptor project[猛禽项目]</name>
	<description>基于Netty4开发的RPC服务框架raptor</description>

	<!-- 子模块 -->
	<modules>
		<module>raptor-core</module>
		<module>raptor-web</module>
        <module>raptor-service</module>
  </modules>

	<!-- POM自定义属性 -->
	<properties>
		<junit.version>3.8.1</junit.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<spring.version>4.3.21.RELEASE</spring.version>
	</properties>

    <dependencyManagement>
        <dependencies>
          <dependency>
             <groupId>cn.raptor</groupId>
             <artifactId>raptor-core</artifactId>
             <version>0.0.1-SNAPSHOT</version>
          </dependency>
          <dependency>
             <groupId>cn.raptor</groupId>
             <artifactId>raptor-service</artifactId>
             <version>0.0.1-SNAPSHOT</version>
          </dependency>
        </dependencies>       
    </dependencyManagement>
    
	<dependencies>
			<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		    <scope>provided</scope>
		</dependency>
			
			<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.3</version>
		    <scope>provided</scope>
		</dependency>
	
		<!-- Spring依赖 -->
		<!-- 1.Spring核心依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- 2.Spring dao依赖 -->
		<!-- spring-jdbc包括了一些如jdbcTemplate的工具类 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- 3.Spring web依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- 4.Spring test依赖：方便做单元测试和集成测试 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.3</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- logback start -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.3</version>
		</dependency>

		<!-- logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener -->
		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.2</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- logback end -->

		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.2.8</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<!-- 线程安全的,更强大的日期API -->
		<!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/io.netty/netty-all -->
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>4.1.31.Final</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling -->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling</artifactId>
			<version>2.0.6.Final</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling-serial -->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling-serial</artifactId>
			<version>2.0.6.Final</version>
			<!-- <scope>test</scope> -->
		</dependency>

		<!-- https://mvnrepository.com/artifact/de.ruedigermoeller/fst -->
		<dependency>
			<groupId>de.ruedigermoeller</groupId>
			<artifactId>fst</artifactId>
			<version>2.57</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator -->
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.0.13.Final</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.validation/validation-api -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>2.0.1.Final</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.glassfish/javax.el -->
		<!-- 配合hibernate-validator,开发注解 -->
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.el</artifactId>
			<version>3.0.1-b10</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->
		<dependency>
			<groupId>com.google.protobuf</groupId>
			<artifactId>protobuf-java</artifactId>
			<version>3.6.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.jdom/jdom2 -->
		<dependency>
			<groupId>org.jdom</groupId>
			<artifactId>jdom2</artifactId>
			<version>2.0.6</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-compress -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-compress</artifactId>
			<version>1.18</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
			<version>2.6.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>27.0.1-jre</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator -->
		<dependency>
		    <groupId>com.fasterxml.uuid</groupId>
		    <artifactId>java-uuid-generator</artifactId>
		    <version>3.1.5</version>
		</dependency>
		
			<!-- https://mvnrepository.com/artifact/com.github.stephenc.eaio-uuid/uuid -->
		<dependency>
		    <groupId>com.github.stephenc.eaio-uuid</groupId>
		    <artifactId>uuid</artifactId>
		    <version>3.4.2</version>
		</dependency>
	
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.0</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<!-- jetty插件 -->
				<plugin>
					<groupId>org.eclipse.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>9.4.14.v20181114</version>
					<!-- 
					jetty:stop,stop命令会终止一个运行中的Jetty实例。为了使用它，你需要为这个插件配置一个特别的端口和key。相同的端口和key将被另一个运行的Jetty使用。
						  stopPort:一个Jetty的端口数字，又来监听接收一个终止的命令并将其终止。
						  stopKey:一个发送到stopPort端口的有效命令。
						  stopWait:等待Jetty停止确认的最大时间间隔，单位秒。如果为false或者为设置，那么插件将不会再发出命令后等待结果。
					 -->
				    <configuration>
					    <stopPort>8081</stopPort>
					    <stopKey>foo</stopKey>
					    <stopWait>10</stopWait>
					    <webApp>
                            <contextPath>/raptor</contextPath>
                        </webApp>
                    </configuration>
				</plugin>

			</plugins>
		</pluginManagement>

		<!-- 资源属性文件替换 -->
		<!-- 我们分析下<resource>下面的属性 <directory>: 配置那个目录下的文件通过${key}会被替换成属性值,resource目录下，我们一般放jdbc连接，或配置文件 
			<includes>：指定那个目录下那个文件 <filtering>：这个配置的意思是过滤上面指定属性文件中的占位符，占位符是${变量名称}这样的形式，maven会自动读取配置文件， 
			然后解析其中的占位符，使用上面pom文件中定义的属性进行替换 <exclueds>：在resource目录下，有很多文件，但用些文件不希望替换，则可以通过<excluede>指定 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
					<!-- <include>*.xml</include> <include>init.properties</include> -->
				</includes>
				<filtering>true</filtering>
				<!-- 排除文件 -->
				<!-- <excludes> <exclude>application.properties</exclude> </excludes> -->
			</resource>
		</resources>

		<!-- <filters>:这里的filters与<profile>的filter意思一样，都是指属性文件地址， 这个如果上面定义<profile>的时候指定了，这里就不需要了，但有些开发习惯是在<profile>不定义，然后在<build>里指定。 -->
		<!-- <filters> <filter>application.properties</filter> </filters> -->

		<finalName>Raptor RPC Project</finalName>
		
	</build>

	<!-- profiles配置 -->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<filters>
					<filter>../deploy/vars/dev.properties</filter>
				</filters>
			</build>
		</profile>
	</profiles>
	
</project>